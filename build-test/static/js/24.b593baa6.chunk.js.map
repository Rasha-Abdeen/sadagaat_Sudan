{"version":3,"sources":["components/events/eventsCalender.js"],"names":["Calendar","useState","data","setData","offset","setOffset","setCurrentPage","postsPerPage","t","useTranslation","loading","setLoading","styleMr","i18n","dir","a","window","fetch","address","headers","language","fetcher","json","response","useEffect","fetchData","currentPosts","slice","name","coverImage","className","map","event","key","id","style","height","startDate","getMonthName","to","locationName","length","position","bottom","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","Math","ceil","marginPagesDisplayed","pageRangeDisplayed","onPageChange","e","selected","containerClassName","subContainerClassName","activeClassName"],"mappings":"mPA0HeA,UAzGf,WAAoB,IAAD,EAEQC,mBAAS,IAFjB,mBAEVC,EAFU,KAEJC,EAFI,OAGUF,mBAAS,GAHnB,mBAGVG,EAHU,KAGFC,EAHE,OAIqBJ,mBAAS,GAJ9B,mBAIGK,GAJH,aAKML,mBAAS,GAAzBM,EALU,oBAMVC,EAAKC,cAALD,EANU,EAOcP,oBAAS,GAPvB,mBAOVS,EAPU,KAOAC,EAPA,KAQXC,EAAyB,QAAfC,IAAKC,MAAkB,IAAM,IAR5B,4CAcjB,8BAAAC,EAAA,sEACwBC,OAAOC,MAAP,UAAgBC,cAAhB,UAAkC,CAACC,QAAS,CAAC,kBAAkB,GAAlB,OAAsBN,IAAKO,aADhG,cACQC,EADR,gBAEyBA,EAAQC,OAFjC,OAEQC,EAFR,OAGEpB,EAAQoB,GACRZ,GAAW,GAJb,4CAdiB,sBAyBjBa,qBAAU,YAzBO,mCA0BbC,KACD,CAACZ,IAAKO,WAGX,IAAMM,EAAexB,EAAKyB,MAAMvB,EAASA,EAASG,GAQ9C,OACD,iCAEH,kBAAC,IAAD,CAAQqB,KAAMpB,EAAE,UAAWqB,WAAc,kBACvC,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACdpB,GAAW,kBAAC,IAAD,CAAUA,QAAWA,IAEhCgB,EAAaK,KAAI,SAACC,GAAD,OAChB,yBAAKF,UAAU,8BACb,yBAAKA,UAAU,6CACb,yBAAKA,UAAU,sEACb,yBAAKA,UAAS,sEAAiElB,EAAjE,OAA+EqB,IAAOD,EAAME,IACxG,wBAAIC,MAAS,CAACC,OAAO,SACnB,wBAAIN,UAAU,oDACTE,EAAMK,UAAUV,MAAM,EAAE,KAE7B,wBAAIG,UAAU,qCACVQ,YAAaN,EAAMK,cAI3B,kBAAC,IAAD,CAAME,GAAM,UAAUP,EAAME,IAC5B,wBAAIJ,UAAU,mBAEVE,EAAMJ,MAIV,wBAAIE,UAAU,gCAAgCK,MAAS,CAACC,OAAO,SAC7D,4BAAI,uBAAGN,UAAS,0BAAqBlB,EAArB,QAAhB,IAAsDoB,EAAMK,WAC5D,4BAAI,uBAAGP,UAAS,2BAAsBlB,KAAtC,IAAqDoB,EAAMQ,eAE7D,yBAAKV,UAAU,sBAWtB5B,EAAKuC,OAASlC,GACf,yBAAK4B,MAAS,CAACO,SAAS,WAAWC,OAAO,OAE5C,kBAAC,IAAD,CACoBC,cAAepC,EAAE,QACjBqC,UAAWrC,EAAE,QACbsC,WAAY,MACZC,eAAgB,WAChBC,UAAWC,KAAKC,KAAKhD,EAAKuC,OAASlC,GACnC4C,qBAAsB,EACtBC,mBAAoB,EACpBC,aA5DP,SAACC,GAChBhD,EAAegD,EAAEC,UACjBlD,EAAUiD,EAAEC,SAAWhD,IA2DDiD,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB","file":"static/js/24.b593baa6.chunk.js","sourcesContent":["import React, { useState, useEffect , useRef } from 'react';\r\nimport Header from '../sub_page_header';\r\nimport address from '../utils/address';\r\nimport i18n from 'i18next'\r\nimport { useTranslation } from 'react-i18next';\r\nimport {Link} from 'react-router-dom'\r\nimport {getMonthName} from './getMonthName'\r\nimport ReactPaginate from 'react-paginate'\r\nimport Preload from '../preload'\r\n\r\n\r\n/**\r\n * This component showing calender of all events \r\n * @component\r\n *  @see http://sadagaat-uk.org/calender\r\n */\r\n\r\nfunction Calendar(){\r\n\r\n  const [data, setData ] = useState([])\r\n  const [offset ,setOffset]= useState(0)\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(6);\r\n  const {t} = useTranslation()\r\n  const [loading , setLoading] = useState(true)\r\n  const styleMr = i18n.dir() === \"rtl\" ? \"l\" : \"r\"\r\n\r\n/**\r\n     * This function return All events returned by the API \r\n     * @return {Array} array  of events returned by the API\r\n*/\r\n  async function fetchData() {\r\n    const fetcher = await window.fetch(`${address()}events`,{headers: {'accept-language': `${i18n.language}`}})\r\n    const response = await fetcher.json()\r\n    setData(response)\r\n    setLoading(false)\r\n\r\n  }\r\n  \r\n /**  useEffect call fetchData()  to get all events when component mounted or  when change language\r\n*/\r\n  \r\n  useEffect(() => {\r\n      fetchData()\r\n   },[i18n.language])\r\n\r\n  // Get current events you wate to post in page\r\nconst currentPosts = data.slice(offset , offset + postsPerPage);\r\n\r\n// Change page paginate change current page of pagenation  and change the value of offset\r\n\r\nconst paginate = (e) => {\r\n  setCurrentPage(e.selected)\r\n  setOffset(e.selected * postsPerPage)\r\n}\r\n    return(\r\n   <section>\r\n          \r\n<Header name={t(\"Events\")} coverImage = {'events-bg-img'}/>\r\n  <div className=\"container mt-30 mb-30\">\r\n    <div className=\"section-content\">\r\n      <div className=\"row\">\r\n      {loading && <Preload  loading = {loading}/>}\r\n\r\n      {currentPosts.map((event) => (  \r\n        <div className=\"col-sm-6 col-md-4 col-lg-4\">\r\n          <div className=\"schedule-box maxwidth500 bg-lighter mb-30\" >\r\n            <div className=\"schedule-details border-bottom-theme-color-2px clearfix p-15 pt-10\">\r\n              <div className={`text-center pull-left flip bg-theme-colored p-10 pt-5 pb-5 m${styleMr}-10`} key = {event.id}>\r\n                <ul style = {{height:'50px'}}>\r\n                  <li className=\"font-19 text-white font-weight-600 border-bottom\">\r\n                      {event.startDate.slice(8,10)}\r\n                  </li>\r\n                  <li className=\"font-12 text-white text-uppercase\">\r\n                     {getMonthName(event.startDate)}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <Link to = {'/event/'+event.id} >\r\n              <h4 className=\"title mt-5 mb-5\">\r\n                \r\n                 {event.name} \r\n                \r\n                </h4>\r\n               \r\n              <ul className=\"list-inline font-11 text-gray\" style = {{height:'50px'}}>\r\n                <li><i className={`fa fa-calendar m${styleMr}-5`} /> {event.startDate}</li>\r\n                <li><i className={`fa fa-map-marker ${styleMr}`} /> {event.locationName}</li>\r\n              </ul>\r\n              <div className=\"clearfix\" >\r\n            </div>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      ))}\r\n      </div>\r\n      </div>\r\n\r\n      {/* pagination doesnt appear untile the event length being more than 6  postPerPage */}\r\n      {data.length > postsPerPage &&(\r\n      <div style = {{position:'absolute',bottom:'0%'}}>\r\n\r\n    <ReactPaginate\r\n                        previousLabel={t('prev')}\r\n                        nextLabel={t('next')}\r\n                        breakLabel={\"...\"}\r\n                        breakClassName={\"break-me\"}\r\n                        pageCount={Math.ceil(data.length / postsPerPage)}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={5}\r\n                        onPageChange={paginate}\r\n                        containerClassName={\"pagination\"}\r\n                        subContainerClassName={\"pages pagination\"}\r\n                        activeClassName={\"active\"}/>\r\n            </div>\r\n      )}\r\n      </div>\r\n      </section>\r\n\r\n    )\r\n}\r\nexport default Calendar;"],"sourceRoot":""}